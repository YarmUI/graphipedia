/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Title Search
         * @description Searches article titles with partial matching and returns a list of matching Wikipedia articles
         */
        get: operations["titleSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/graph_search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Graph Search
         * @description Searches for the shortest path from a start article to an end article.
         *     Uses a bidirectional breadth-first search algorithm for efficient searching.
         *
         */
        get: operations["graphSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        TitleSearchQuery: {
            /** @description Search query string */
            query: string;
            /** @description Maximum number of results to return */
            limit?: number | null;
        };
        TitleSearchResult: {
            query: components["schemas"]["TitleSearchQuery"];
            items: components["schemas"]["TitleSearchResultItem"][];
            duration: components["schemas"]["Duration"];
        };
        TitleSearchResultItem: {
            /** @description Article title */
            title: string;
            /**
             * Format: int32
             * @description Article ID
             */
            id: number;
            /** @description Whether the article is a redirect */
            is_redirect: boolean;
            /** @description Title of the article being redirected to */
            redirected_title?: string | null;
            /**
             * Format: int32
             * @description ID of the article being redirected to
             */
            redirected_id?: number | null;
            /** @description Total number of links (forward + backward) */
            link_count: number;
            /** @description Number of forward links */
            forward_link_count: number;
            /** @description Number of backward links */
            backward_link_count: number;
        };
        GraphSearchQuery: {
            /** @description Title of the start article */
            start: string;
            /** @description Title of the end article */
            end: string;
            /** @description Whether to include date-related articles in the search */
            enable_date_related?: boolean | null;
            /** @description Whether to include list articles in the search */
            enable_list_article?: boolean | null;
        };
        GraphSearchResult: {
            /**
             * Format: int32
             * @description Number of nodes discovered during the search
             */
            discovered_nodes: number;
            /**
             * Format: int32
             * @description Number of nodes visited during the search
             */
            visited_nodes: number;
            /** @description Information about the start node */
            start_node?: components["schemas"]["GraphSearchResultNode"];
            /** @description Information about the end node */
            end_node?: components["schemas"]["GraphSearchResultNode"];
            /** @description Detailed search information about the start node */
            start_node_search_result?: components["schemas"]["TitleSearchResultItem"];
            /** @description Detailed search information about the end node */
            end_node_search_result?: components["schemas"]["TitleSearchResultItem"];
            /** @description List of nodes in the path */
            nodes: components["schemas"]["GraphSearchResultNode"][];
            /** @description List of edges (links) in the path. Each element is in the format [from_node_id, to_node_id] */
            edges: number[][];
            /** @description Whether the start node was not found */
            start_not_found: boolean;
            /** @description Whether the end node was not found */
            end_not_found: boolean;
            /** @description Whether a route was found */
            route_found: boolean;
            /** @description Whether both the start and end nodes were found */
            is_start_end_some: boolean;
            /** @description Time taken for the search */
            duration: components["schemas"]["Duration"];
        };
        GraphSearchResultNode: {
            /**
             * Format: int32
             * @description Node ID
             */
            id: number;
            /**
             * Format: int32
             * @description Namespace ID
             */
            ns: number;
            /** @description Article title */
            title: string;
            /** @description Whether the article is a redirect */
            is_redirect: boolean;
            /** @description Whether the article is date-related */
            is_date_related: boolean;
            /** @description Whether the article is a list article */
            is_list_article: boolean;
            /**
             * Format: int8
             * @description Distance from the start node
             */
            distance: number;
        };
        Duration: {
            /**
             * Format: int64
             * @description Seconds
             */
            secs: number;
            /**
             * Format: int32
             * @description Nanoseconds
             */
            nanos: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    titleSearch: {
        parameters: {
            query: {
                /** @description Search query string */
                query: string;
                /** @description Maximum number of results to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TitleSearchResult"];
                };
            };
        };
    };
    graphSearch: {
        parameters: {
            query: {
                /** @description Title of the start article */
                start: string;
                /** @description Title of the end article */
                end: string;
                /** @description Whether to include date-related articles in the search */
                enable_date_related?: boolean;
                /** @description Whether to include list articles in the search */
                enable_list_article?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GraphSearchResult"];
                };
            };
        };
    };
}
